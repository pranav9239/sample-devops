name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Which environment to deploy"
        required: true
        default: "dev"
      run_docker_build:
        description: "Do you want to build docker image?"
        required: true
        default: false
        type: boolean
      docker_build_version:
        description: "Which version of docker image?"
        required: false
        default: "latest"
        type: string
      run_deploy:
        description: "Do you want to run deploy?"
        required: true
        default: true
        type: boolean
      run_destroy:
        description: "Do you want to run destroy?"
        required: false
        default: false
        type: boolean

jobs:
  build_docker:
    runs-on: self-hosted
    if: ${{ github.event.inputs.run_deploy == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build docker
      run: |
        docker build -t app-static:${{ github.event.inputs.docker_build_version }} ./spotify-clone-website/
        docker build -t app-dynamic:${{ github.event.inputs.docker_build_version }} ./website-visit-tracker/

  deploy_dev:
    runs-on: self-hosted
    if: ${{ github.event.inputs.run_deploy == 'true' }}
    needs: build_docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get directory
      run: pwd

    - name: Setup Terraform
      #run: hashicorp/setup-terraform@v3.1.2
      run: |
        if ! command -v terraform &> /dev/null
        then
          echo "Terraform is not installed, installing now..."
          curl -o terraform.zip https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          echo "Unzipping..."
          unzip terraform.zip
          echo "Moving..."
          sudo mv terraform /usr/local/bin/
        else
          echo "Terraform is already installed."
        fi
    
    - name: Terraform init and validate
      run: |
        echo "Running terraform commands"
        terraform init
        terraform fmt
        terraform validate
      
    - name: Terraform apply
      env:
        TF_VAR_image_version_static_website: ${{ github.event.inputs.docker_build_version }}
        TF_VAR_image_version_dynamic_website: ${{ github.event.inputs.docker_build_version }}
      run: |
        terraform apply -var-file="./dev.tfvars" -auto-approve

  destroy_dev:
    runs-on: self-hosted
    if: ${{ github.event.inputs.run_destroy == 'true' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up and destroy environment
      run: |
        echo "Destroying terraform resources"
        terraform init
        terraform destroy -auto-approve

  test:
    runs-on: self-hosted
    needs: deploy_dev
    steps:
    - name: Check if website is accessible
      run: |
        echo "Testing if the website is accessible"
        sleep 10  # Wait for a few seconds to ensure the container is up
        curl --fail http://localhost:8001
        curl --fail http://localhost:8002
